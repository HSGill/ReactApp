{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","App.js","ErrorBoundary.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","cardComponent","map","user","i","src_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","App","Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchCHange","event","setState","target","value","state","_this2","fetch","then","response","json","users","_this3","filteredRobots","filter","robot","toLowerCase","includes","src_SearchBox","src_CardList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+NAeeA,EAbF,SAAAC,GAAqB,IAAnBC,EAAmBD,EAAnBC,KAAKC,EAAcF,EAAdE,MAAMC,EAAQH,EAARG,GACtB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qDAEXH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,SAASC,IAAG,wBAAAC,OAA0BP,EAA1B,cACrBC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,SAAIJ,MCSLS,EAfE,SAAAX,GAAa,IAAXY,EAAWZ,EAAXY,OACTC,EAAgBD,EAAOE,IAAI,SAACC,EAAKC,GACnC,OAAQZ,EAAAC,EAAAC,cAACW,EAAD,CACRC,IAAKF,EACLb,GAAKS,EAAOI,GAAGb,GACfF,KAAMW,EAAOI,GAAGf,KAChBC,MAAOU,EAAOI,GAAGd,UAGzB,OACIE,EAAAC,EAAAC,cAAA,WAAMO,ICAKM,EAXG,SAAAnB,GAAgCA,EAA9BoB,YAA8B,IAAlBC,EAAkBrB,EAAlBqB,aAC5B,OACIjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mCACbe,KAAK,SAASC,YAAY,gBACtBC,SAAYH,MC+BjBI,GCpCaC,8BDMxB,SAAAD,IAAc,IAAAE,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACVE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,QAUJI,eAAiB,SAACC,GACdR,EAAKS,SAAS,CAAEhB,YAAae,EAAME,OAAOC,SAV1CX,EAAKY,MAAQ,CACT3B,OAAQ,GACRQ,YAAa,IAJPO,mFAOK,IAAAa,EAAAV,KACfW,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAGA,EAASC,SAAQF,KAAK,SAAAG,GAAK,OAAEL,EAAKJ,SAAS,CAACxB,OAAOiC,uCAK/D,IAAAC,EAAAhB,KACCiB,EAAiBjB,KAAKS,MAAM3B,OAAOoC,OAAO,SAAAC,GAC5C,OAAOA,EAAMhD,KAAKiD,cAAcC,SAASL,EAAKP,MAAMnB,YAAY8B,iBAIpE,OACI9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,eACAH,EAAAC,EAAAC,cAAC8C,EAAD,CAAW/B,aAAcS,KAAKI,iBAC9B9B,EAAAC,EAAAC,cAAC+C,EAAD,CAAUzC,OAAQmC,YAzBhBrB,cEKE4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACLxD,EAAAC,EAAAC,cAACuD,EAAD,MAAUC,SAASC,eAAe,SD0HhC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC","file":"static/js/main.5e165845.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name,email,id}) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 bw2 grow shadow'>\r\n        \r\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card'\r\n\r\nconst CardList = ({robots}) =>{\r\n    const cardComponent = robots.map((user,i) => {\r\n        return (<Card \r\n        key={i} \r\n        id ={robots[i].id} \r\n        name={robots[i].name} \r\n        email={robots[i].email}  />\r\n       )\r\n    })\r\nreturn (\r\n    <div>{cardComponent}  \r\n        </div>\r\n)\r\n\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield,searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input className='pa3 ba b--green bg-lightest-blue'\r\n                type='search' placeholder='search robots' \r\n                    onChange = {searchChange}\r\n                /></div>\r\n    )\r\n\r\n}\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from 'react';\r\nimport CardList from './CardList';\r\nimport { robots } from './robots';\r\nimport SearchBox from './SearchBox';\r\nimport ErrorBoundary from './ErrorBoundary';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=> response.json()).then(users=>this.setState({robots:users}));\r\n    }\r\n    onSearchCHange = (event) => {\r\n        this.setState({ searchfield: event.target.value })\r\n    }\r\n    render() {\r\n        const filteredRobots = this.state.robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n\r\n        })\r\n\r\n        return (\r\n            <div className='tc'>\r\n                <h1 className='f1'>RoboFriends</h1>\r\n                <SearchBox searchChange={this.onSearchCHange} />\r\n                <CardList robots={filteredRobots} />\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props){\r\n        super(props);\r\n         this.state = {\r\n            hasError :false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n       this.setState({hasError :true});\r\n    }\r\n\r\n    return(){\r\n        if(this.state.hasError){\r\n            return <h1>Oooops. That is not good</h1>\r\n        }\r\n        return this.props.children;\r\n\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport App  from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(\n    <App /> , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}